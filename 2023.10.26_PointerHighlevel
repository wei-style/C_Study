//函数指针
int Add(int x, int y) {
	return x + y;
}

int main() {
	int arr[5] = { 0 };
	//&数组名取出的是数组的地址
	int (*p)[5] = &arr;
	//&函数名是函数的地址
	printf("%p\n", &Add);
	printf("%p\n", Add);//对于函数来说，&函数名与函数名都是拿到函数的地址
//下面定义了一个函数指针，(*pf)说明它是一个指针，(int,int)说明它指向一个有俩个int形参的函数，int说明这个函数的返回值是int类型。
	int (*pf)(int, int) = &Add;
	printf("%p\n", pf);
	printf("%d\n", (*pf)(2, 3));//(*pf)取出这个函数，然后传入2，3两个实参，得到返回值打印出结果5，这里的*可以省略，原因是函数名可以当作函数地址，而地址相当于是指针，所以函数名和指针基本等价，所以直接写pf(2,3)也可以
}

//加减乘除计算器
//利用函数指针编写一个计算器实现加减乘除
#include "stdio.h"
void menu() {
	printf("***********************\n");//菜单显示
	printf("*********0.Exit********\n");
	printf("**1.add*********2.sub**\n");
	printf("**3.mul*********4.div**\n");
	printf("***********************\n");
}
int Add(int x, int y) {//实现了一些加减乘除的函数
	return x + y;
}
int Sub(int x, int y) {
	return x - y;
}
int Mul(int x, int y) {
	return x * y;
}
int Div(int x, int y) {
	return x / y;
}
void cal(int(*pf)(int, int ) ) {//函数指针的应用：定义了一个函数cal，他的入口参数是函数指针，意思是传入的参数是函数。
	int x, y;
	printf("请输入两个操作数\n");
	scanf("%d%d", &x, &y);
	printf("%d\n", (*pf)(x, y));//调用传入的函数，实现运算，并打印结果，(*pf)找到函数本身，然后传入实参x，y实现运算。
}
int main() {
	int input;
	do {
		menu();
		printf("请选择\n");
		scanf("%d", &input);
		switch (input) {
			case 0: {
				printf("已退出");
			}
			break;
			case 1: {
				/*				
printf("请输入两个操作数\n");//这段代码重复性很高
								scanf("%d%d", &x, &y);//在下面用cal代替，体现了函数
								ret = Add(x, y);//指针的妙用，可以节省很大一段代码
								printf("%d\n", ret);*/
				cal(Add);//将Add函数的地址传入cal
			}
			break;
			case 2: {
				/*				printf("请输入两个操作数\n");
								scanf("%d%d", &x, &y);
								ret = Sub(x, y);
								printf("%d\n", ret);*/
				cal(Sub);
			}
			break;
			case 3: {
				/*				printf("请输入两个操作数\n");
								scanf("%d%d", &x, &y);
								ret = Mul(x, y);
								printf("%d\n", ret);*/
				cal(Mul);
			}
			break;
			case 4: {
				/*				printf("请输入两个操作数\n");
								scanf("%d%d", &x, &y);
								ret = Div(x, y);
								printf("%d\n", ret);*/
				cal(Div);
			}
			break;
			default:
				printf("选择无效\n");
				break;
		}
	} while (input);
}

//函数指针实现计算器
#include "stdio.h"
void menu() {
	printf("***********************\n");
	printf("*********0.Exit********\n");
	printf("**1.add*********2.sub**\n");
	printf("**3.mul*********4.div**\n");
	printf("***********************\n");
}
int Add(int x, int y) {
	return x + y;
}
int Sub(int x, int y) {
	return x - y;
}
int Mul(int x, int y) {
	return x * y;
}
int Div(int x, int y) {
	return x / y;
}
int main() {
	int input;
	int x, y;
	int (*arr[5])(int, int) = {0, &Add, &Sub, &Mul, &Div};//定义了一个函数指针数组，数组的类型是函数指针类型int(*)(int,int)，数组一共有五个元素，分别是0，&Add,&Sub,&Mul,&Div可以不加&符号，因为函数的地址就是函数名，&函数名也是函数地址，两者值相同
	do {
		menu();
		printf("请选择\n");
		scanf("%d", &input);
		if (input == 1 || input == 2 || input == 3 || input == 4) {
			printf("请输入两个操作数\n");
			scanf("%d%d", &x, &y);
			printf("%d\n", (*arr[input])(x, y));//*(arr[input])取出数组中的函数，再传入参数x,y将返回值打印
		} else if (input == 0)
			printf("已退出\n");
		else
			printf("输入无效\n");
	} while (input);
}

//冒泡排序
void bubble_sort(int arr[], int sz) {
	int i = 0;
	int j = 0;
	for (i = 0; i < sz - 1; i++)
		for (j = 0; j < sz - 1 - i; j++) { //j<sz-1-i是因为j每一次排序总次数是sz-1，每排完一次就可以少一个元素进行排序所以再减i
			int temp;
			if (arr[j] > arr[j + 1])
				temp = arr[j];
			arr[j] = arr[j + 1];
			arr[j + 1] = temp;
		}
}
int main() {
	int arr[] = {9, 8, 7, 6, 5, 4, 3, 2, 1, 0};
	int sz = sizeof(arr) / sizeof(arr[0]);
	bubble_sort(arr, sz);
	for (int i = 0; i < sz; i++) {
		printf("%d ", arr[i]);
	}
}
