struct A
{
	int _a : 2;//表示_a只占2个bit位
	int _b : 5;
	int _c : 10;
	int _d : 30;
};
int main()
{
	printf("% d\n", sizeof (struct A));//输出8
}


struct S
{
	char a : 3;//开辟一个字节放入a，还剩5个bit
	char b : 4;//4bit下的5个bit，还剩下1个bit
	char c : 5;//剩下的1个bit放不下5bit，要再开辟一个字节，并且前面的1bit不再使用，将5bit放入新的一个字节中，还剩下3bit
	char d : 4;//同理，会再开辟一个字节的空间放入4bit，还剩下4bit
};
int main()
{
	struct S s = { 0 };
	printf("%d\n", sizeof(struct S));//输出3
	s.a = 10;//10会被截断，只取低三位，010
	s.b = 12;//12刚好4bit，存储为1100
	s.c = 3;//开辟新的字节，存储为00011
	s.d = 4;//开辟新的字节储存0100
}





/***************contach.h*******************/
#pragma once
#include "stdio.h"
#define Max 100
typedef struct PeoInfo
{
	char name[20];
	int age;
	char sex[10];
	char tele[12];
	char addr[30];
}PeoInfo,* LinkPeoInfo;

typedef struct Contact
{
	PeoInfo data[Max];
	int count;
}contact;

int InitContact(contact* C);
int AddContact(contact* C);
int ShowContact(contact* C);
int DeleteContact(contact* C);
int FindName(contact* C, char* name[]);
void SearchContact(contact* C);
void ModifyContact(contact* C);





/***************contact.c*******************/
#include "contact.h"
#include "string.h"
int InitContact(contact* c)
{
	if (c == NULL)
		return -1;
	memset(c->data, 0, sizeof(c->data));
	c->count = 0;
	return 0;
}
int AddContact(contact* C)
{
	if (C == NULL)
		return -1;
	if (C->count == Max)
	{
		printf("通讯录已满，无法再添加\n");
		return -1;
	}

	printf("请输入姓名：\n");
	scanf("%s", (C->data + C->count)->name);
	printf("请输入年龄：\n");
	scanf("%d", &(C->data + C->count)->age);
	printf("请输入性别：\n");
	scanf("%s", (C->data + C->count)->sex);
	printf("请输入电话号码：\n");
	scanf("%s", (C->data + C->count)->tele);
	printf("请输入住址：\n");
	scanf("%s", (C->data + C->count)->addr);

	C->count++;
}

int ShowContact(contact* C)
{
	if (C == NULL)
		return -1;
	int i = 0;
	printf("%20s\t%5s\%5s\t%12s\t%30s\n", "名字","年龄", "性别", "电话", "地址");
	for (i = 0; i < C->count; i++)
	{
		printf("%20s\t%5d\%5s\t%12s\t%30s\n", C->data[i].name, C->data[i].age, C->data[i].sex, C->data[i].tele, C->data[i].addr);
	}
}

int FindName(contact* C, char* name[])
{
	if (C == NULL)
		return -1;
	int i = 0;
	for (i = 0; i < C->count; i++)
	{
		if(strcmp(C->data[i].name,name)==0)
		{
			return i;
		}
	}
	return -1;
}


int DeleteContact(contact* C)
{
	if (C == NULL)
		return -1;
	char arr[20] = { 0 };
	printf("请输入名字：");
	scanf("%s", arr);
	int ret = FindName(C, arr);
	if (ret != -1)
	{
		int i;
		for (i = ret; i < C->count - 1; i++)
		{
			C->data[i] = C->data[i + 1];
		}
		C->count--;
}
}
void SearchContact(contact* C)
{
	if (C == NULL)
		return -1;
	char arr[20] = { 0 };
	printf("请输入名字：");
	scanf("%s", arr);
	int ret = FindName(C, arr);
	if (ret == -1)
	{
		printf("查找的人不存在\n");
		return ;
	}
	printf("%20s\t%5s\%5s\t%12s\t%30s\n", "名字", "年龄", "性别", "电话", "地址");
	printf("%20s\t%5d\%5s\t%12s\t%30s\n", C->data[ret].name, C->data[ret].age, C->data[ret].sex, C->data[ret].tele, C->data[ret].addr);
	return;
}

void ModifyContact(contact* C)
{
	if (C == NULL)
		return -1;
	char arr[20] = { 0 };
	printf("请输入要修改人的名字：");
	scanf("%s", arr);
	int ret = FindName(C, arr);
	if (ret == -1)
	{
		printf("查修改的人不存在\n");
		return;
	}
	printf("请输入姓名：\n");
	scanf("%s", C->data[ret].name);
	printf("请输入年龄：\n");
	scanf("%d", &(C->data + ret)->age);
	printf("请输入性别：\n");
	scanf("%s", (C->data + ret)->sex);
	printf("请输入电话号码：\n");
	scanf("%s", (C->data + ret)->tele);
	printf("请输入住址：\n");
	scanf("%s", (C->data + ret)->addr);
}





	
